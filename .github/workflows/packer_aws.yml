name: Deploy Web App on EC2 (AWS) and Run Integration Tests

on:
  pull_request_target:
    types: [closed]
    branches:
      - main

jobs:
  deploy_and_test_aws:
    runs-on: ubuntu-latest

    # services:
      # mysql:
      #   image: mysql:latest
      #   env:
      #     MYSQL_ROOT_PASSWORD: "${{secrets.DB_ROOT_PASSWORD}}" 
      #     MYSQL_DATABASE: "${{secrets.DB_NAME}}"             
      #     MYSQL_USER: "${{secrets.DB_USER}}"               
      #     MYSQL_PASSWORD: "${{secrets.DB_PASSWORD}}"     
      #   ports:
      #     - 3306:3306

    steps:
    # # Step 1: Checkout the repository
    #   - name: Checkout code
    #     uses: actions/checkout@v2

    #   - name: Checkout repository
    #     uses: actions/checkout@v4

    #   - name: Set up environment file
    #     run: |
    #       echo "hostname=${{secrets.DB_HOST}}" >> .env
    #       echo "username=root" >> .env
    #       echo "password=${{secrets.DB_ROOT_PASSWORD}}" >> .env 
    #       echo "database=${{secrets.DB_NAME}}" >> .env        
    #       echo "port=${{secrets.DB_PORT}}" >> .env

    #   - name: Install dependencies
    #     run: npm install

    #   - name: Wait for MySQL to be ready
    #     run: sleep 20

    #   - name: Run tests
    #     run: npm test
    #     continue-on-error: false 

    #   - name: Make zip
    #     run: zip -r webapp.zip . -x ".git/*"

    # # Step 2: Set up AWS CLI
    #   - name: Set up AWS CLI
    #     run: |
    #       aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
    #       aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
    #       aws configure set region us-east-1
        
    #   - name: Install gcloud for packer
    #     run: "packer plugins install github.com/hashicorp/googlecompute"

    #   # Step 3: Initialize packer
    #   - name: Initialize packer to create EC2 instance
    #     run: |
    #       packer init .

    #   # Step 4: Validate packer
    #   - name: Validate packer to create EC2 instance
    #     run: |
    #       packer validate .

      # Step 5: Building packer
      # - name: Run Packer to create AMI for EC2 instance
      #   run: |
      #     packer build \
      #     -var "aws_region=${{secrets.AWS_REGION}}" \
      #     -var "aws_db_root_password=${{secrets.DB_ROOT_PASSWORD}}" \
      #     -var "aws_db_name=${{secrets.DB_NAME}}" \
      #     aws-custom-image.pkr.hcl

      #Now we have to switch to demo
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}"
          aws configure set region us-east-1

      # Step 6: Get AMI ID
      - name: Get latest Ubuntu AMI ID
        id: get_ami
        run: |
          LATEST_AMI=$(aws ec2 describe-images \
                        --executable-users self \
                        --filters "Name=name,Values=custom-ubuntu-24.04-ami-*" "Name=is-public,Values=false" \
                        --query "sort_by(Images, &CreationDate)[-1].ImageId" \
                        --output text)
          echo "Latest AMI: $LATEST_AMI"
          echo "LATEST_AMI=$LATEST_AMI" >> $GITHUB_ENV
      
      # Step 7: Create a version of launch template
      - name: Create new launch template version with new AMI only
        id: new_template
        run: |
            NEW_VERSION=$(aws ec2 create-launch-template-version \
              --launch-template-name "${{secrets.LAUNCH_TEMPLATE}}" \
              --source-version '$Latest' \
              --launch-template-data '{\"ImageId\":\"${{env.LATEST_AMI}}\"}' \
              --query 'VersionNumber' --output text)
            echo "Created new version: $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Step 8: update asg
      - name: Update ASG to use latest launch template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "${{secrets.ASG_NAME}}" \
            --launch-template "LaunchTemplateName=${{secrets.LAUNCH_TEMPLATE}},Version=${{env.NEW_VERSION}}"

      - name: Start instance refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{secrets.ASG_NAME}}" \
            --query "InstanceRefreshId" --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for instance refresh to complete
        run: |
          echo "Waiting for instance refresh to complete..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{secrets.ASG_NAME}}" \
              --instance-refresh-ids "${{env.REFRESH_ID}}" \
              --query 'InstanceRefreshes[0].Status' --output text)
            echo "Refresh status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh succeeded."
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance refresh failed or cancelled."
              exit 1
            fi
            sleep 30
          done
